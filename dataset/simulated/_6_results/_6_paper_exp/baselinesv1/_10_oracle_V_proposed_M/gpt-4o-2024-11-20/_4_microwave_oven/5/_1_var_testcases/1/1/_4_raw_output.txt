variable list files available
Feature list already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/1/_0_reasoning/_3_proposed_feature_list.py
World model already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/1/_0_reasoning/_4_proposed_world_model.py. Skipping...
variable list files available
Feature list already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/2/_0_reasoning/_3_proposed_feature_list.py
World model already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/2/_0_reasoning/_4_proposed_world_model.py. Skipping...
variable list files available
Feature list already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/3/_0_reasoning/_3_proposed_feature_list.py
World model already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/3/_0_reasoning/_4_proposed_world_model.py. Skipping...
variable list files available
Feature list already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/4/_0_reasoning/_3_proposed_feature_list.py
World model already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/4/_0_reasoning/_4_proposed_world_model.py. Skipping...
variable list files available
Feature list already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/5/_0_reasoning/_3_proposed_feature_list.py
World model already exists at /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/5/_0_reasoning/_4_proposed_world_model.py. Skipping...
processing:  _4_microwave_oven 5 var 1
processing:  _4_microwave_oven 5 1
trial:  1
attempt:  0
appliance capability is modelled in /data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/5/_1_var_testcases/1/1/_1_world_model_specific_to_command.py.
attempt:  0
generated goal state code:  feature_sequence = ["adjust_function_dial", "adjust_temperature_dial", "adjust_selector_dial", "adjust_timer_dial"]
feature_choice_reason = "Feature 'adjust_function_dial' is required to set the function dial to 'Convection'. Feature 'adjust_temperature_dial' is required to set the temperature dial to '150°C'. Feature 'adjust_selector_dial' is required to set the selector dial to 'Top & Bottom Heating'. Feature 'adjust_timer_dial' is required to set the timer dial to '20 minutes'. Each feature is necessary to configure the appliance as per the user instruction."
changing_variables = ["variable_function_dial", "variable_temperature_dial", "variable_selector_dial", "variable_timer_dial"]
goal_state = ExtendedSimulator()
# "adjust_function_dial", step 1, variable_function_dial
goal_state.variable_function_dial.set_current_value("Convection")
# "adjust_temperature_dial", step 1, variable_temperature_dial
goal_state.variable_temperature_dial.set_current_value("150°C")
# "adjust_selector_dial", step 1, variable_selector_dial
goal_state.variable_selector_dial.set_current_value("Top & Bottom Heating")
# "adjust_timer_dial", step 1, variable_timer_dial
goal_state.variable_timer_dial.set_current_value("20 minutes")
All changing_variables are correctly assigned.
formatting done
setting agnostic
initial appliance state:  variable_function_dial: Off
variable_selector_dial: Off
variable_temperature_dial: Off
variable_timer_dial: Off

current_state_simulator when it is just created: 

 variable_function_dial: Off
variable_selector_dial: Off
variable_temperature_dial: Off
variable_timer_dial: Off

goal state:  variable_function_dial: Convection
variable_selector_dial: Top & Bottom Heating
variable_temperature_dial: 150°C
variable_timer_dial: 20 minutes
current feature:  adjust_function_dial
step_info:  {'step': 1, 'actions': ['turn_function_dial_clockwise', 'turn_function_dial_anticlockwise'], 'variable': 'variable_function_dial'}
executing action: ('turn_function_dial_clockwise', 1)
goal state string:  We want to have the variable: variable_function_dial to have a value of Convection. 
goal_state_simulator: variable_function_dial: Convection
variable_selector_dial: Off
variable_temperature_dial: Off
variable_timer_dial: Off
current_state_simulator: variable_function_dial: Convection
variable_selector_dial: Off
variable_temperature_dial: Off
variable_timer_dial: Off
variable_name: variable_function_dial
actions: ['turn_function_dial_clockwise', 'turn_function_dial_anticlockwise']
astarsearch: <class 'AStarSearch'>
planning_result:  []
feedbacks:  ["applied action: ('turn_function_dial_clockwise', 1), feedback: {'feature': ('function', 1), 'variable_function_dial': 'Convection'}"]
check state....
Feedback Variable: 

 variable_function_dial: convection 


Comparison result: 

 reason = "The feedback value 'convection' matches the goal value 'Convection' as they differ only in capitalization, which is semantically the same. According to Rule 1, this is considered a match."
goal_reached = True 


goal state reached: True
current feature:  adjust_temperature_dial
step_info:  {'step': 1, 'actions': ['turn_temperature_dial_clockwise', 'turn_temperature_dial_anticlockwise'], 'variable': 'variable_temperature_dial'}
executing action: ('turn_temperature_dial_clockwise', 1)
goal state string:  We want to have the variable: variable_temperature_dial to have a value of 150°C. 
goal_state_simulator: variable_function_dial: Convection
variable_selector_dial: Off
variable_temperature_dial: 150°C
variable_timer_dial: Off
current_state_simulator: variable_function_dial: Convection
variable_selector_dial: Off
variable_temperature_dial: 100°C
variable_timer_dial: Off
variable_name: variable_temperature_dial
actions: ['turn_temperature_dial_clockwise', 'turn_temperature_dial_anticlockwise']
astarsearch: <class 'AStarSearch'>
planning_result:  [('turn_temperature_dial_clockwise', 1)]
feedbacks:  ["applied action: ('turn_temperature_dial_clockwise', 1), feedback: {'feature': ('temp', 1), 'variable_temperature_dial': '100°C'}", "applied action: ('turn_temperature_dial_clockwise', 1), feedback: {'feature': ('temp', 1), 'variable_temperature_dial': '150°C'}"]
check state....
Feedback Variable: 

 variable_temperature_dial: 150°c 


Comparison result: 

 reason = "The goal state requires 'variable_temperature_dial' to have a value of '150°C', while the feedback shows '150°c'. The difference is only in capitalization, and according to the rules, such differences are considered semantically the same."
goal_reached = True 


goal state reached: True
current feature:  adjust_selector_dial
step_info:  {'step': 1, 'actions': ['turn_selector_dial_clockwise', 'turn_selector_dial_anticlockwise'], 'variable': 'variable_selector_dial'}
executing action: ('turn_selector_dial_clockwise', 1)
goal state string:  We want to have the variable: variable_selector_dial to have a value of Top & Bottom Heating. 
goal_state_simulator: variable_function_dial: Convection
variable_selector_dial: Top & Bottom Heating
variable_temperature_dial: 150°C
variable_timer_dial: Off
current_state_simulator: variable_function_dial: Convection
variable_selector_dial: Top Heating
variable_temperature_dial: 150°C
variable_timer_dial: Off
variable_name: variable_selector_dial
actions: ['turn_selector_dial_clockwise', 'turn_selector_dial_anticlockwise']
astarsearch: <class 'AStarSearch'>
planning_result:  [('turn_selector_dial_clockwise', 2)]
feedbacks:  ["applied action: ('turn_selector_dial_clockwise', 1), feedback: {'feature': ('selector', 1), 'variable_selector_dial': 'Top Heating'}", "applied action: ('turn_selector_dial_clockwise', 2), feedback: {'feature': ('selector', 1), 'variable_selector_dial': 'Top & Bottom Heating'}"]
check state....
Feedback Variable: 

 variable_selector_dial: top & bottom heating 


Comparison result: 

 reason = "The goal state requires the variable 'variable_selector_dial' to have the value 'Top & Bottom Heating'. The feedback shows 'top & bottom heating'. Both values are semantically the same, differing only in capitalization, which does not affect the meaning. Therefore, the values match according to the comparison rules."
goal_reached = True 


goal state reached: True
current feature:  adjust_timer_dial
step_info:  {'step': 1, 'actions': ['turn_timer_dial_clockwise', 'turn_timer_dial_anticlockwise'], 'variable': 'variable_timer_dial'}
executing action: ('turn_timer_dial_clockwise', 1)
goal state string:  We want to have the variable: variable_timer_dial to have a value of 20 minutes. 
goal_state_simulator: variable_function_dial: Convection
variable_selector_dial: Top & Bottom Heating
variable_temperature_dial: 150°C
variable_timer_dial: 20 minutes
current_state_simulator: variable_function_dial: Convection
variable_selector_dial: Top & Bottom Heating
variable_temperature_dial: 150°C
variable_timer_dial: 10 minutes
variable_name: variable_timer_dial
actions: ['turn_timer_dial_clockwise', 'turn_timer_dial_anticlockwise']
astarsearch: <class 'AStarSearch'>
planning_result:  [('turn_timer_dial_clockwise', 1)]
feedbacks:  ["applied action: ('turn_timer_dial_clockwise', 1), feedback: {'feature': ('timer', 1), 'variable_timer_dial': '10'}", "applied action: ('turn_timer_dial_clockwise', 1), feedback: {'feature': ('timer', 1), 'variable_timer_dial': '20'}"]
check state....
Feedback Variable: 

 {'variable_timer_dial': '20'} 


Comparison result: 

 reason = "The goal state requires 'variable_timer_dial' to have a value of '20 minutes'. The feedback shows 'variable_timer_dial' with a value of '20'. According to Rule 3, if both values contain numbers and text, we remove the text completely and compare only the numbers. In this case, '20 minutes' and '20' both represent the same numerical value, so they are semantically the same."
goal_reached = True 


goal state reached: True
ground truth info {'id': 1, 'command': "Turn on the microwave oven to bake cookies. Set the temperature to 150°C, function dial to 'Convection', selector dial to 'Top & Bottom Heating', and timer to '20'.", 'target_state': {'variable_function_dial': 'Convection', 'variable_temperature_dial': '150°C', 'variable_selector_dial': 'Top & Bottom Heating', 'variable_timer_dial': '20'}, 'important_target_states': {'variable_function_dial': 'Convection', 'variable_temperature_dial': '150°C', 'variable_selector_dial': 'Top & Bottom Heating', 'variable_timer_dial': '20'}}
robot's decision {'variable_function_dial': 'Convection', 'variable_selector_dial': 'Top & Bottom Heating', 'variable_temperature_dial': '150°C', 'variable_timer_dial': '20'}
Backup of '/data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/5/_1_var_testcases/1/1/_3_log_record.json' created as '/data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/5/_1_var_testcases/1/1/_3_log_record_backup.json'.
Existing file '/data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/5/_1_var_testcases/1/1/_3_log_record.json' has been deleted.
New file '/data/home/jian/TextToActions/datasetv2/simulated/_6_results/_6_paper_exp/baselinesv1/_10_oracle_V_proposed_M/gpt-4o-2024-11-20/_4_microwave_oven/5/_1_var_testcases/1/1/_3_log_record.json' created.
