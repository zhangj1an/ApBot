The list of available actions of the appliance is: 

hhhhh

The user command is:

zzzzz

The relevant part of the appliance user manual that helps command execution is:

xxxxx

Currently, the state of the appliance is still unknown. We will start to receive feedbacks from the display panel once actions are executed. 

Please generate actions to achieve the task. When generating actions, please only generate the ones listed in the available actions. For example, if the listed action has one called “press_power_button”, you can call it once by returning “run_action('press_power_button', execution_times=1)”. You can also call it multiple times. For example, if you want to call “press_power_button” by 3 times, you can return “run_action('press_power_button', execution_times=3)”. If an action needs to be called multiple times when adjusting a variable, try to call it in one go as much as possible to reduce inference cost. For example, if you can call “run_action('press_power_button', 1)” and “run_action('press_power_button', 1)”, try to call it as “run_action('press_power_button', 2)” instead. If you decide that the task has been achieved, return “end” (note it should be "end", not "run_action('end')"). 

If the returned digital display looks too wrong, it means the action cannot be executed to the right place, the task is infeasible. Therefore, you can call 'end' to end the execution early. 

In particular, a press_and_hold action must be called with a duration of specific seconds. For example, if an action is called "press_and_hold_program_button_and_water_level_button", and it must be pressed for at least 5 seconds to work, then you can call it by returning "run_action("press_and_hold_program_button_and_water_level_button", execution_times=1, duration=5)". If the user manual did not specify how long it needs to be pressed, you can just set the duration to be 10 to be safe. 

Note that if press and hold a button leads to a variable value being changed rapidly, please use the regular "press a button" action to adjust variables one by one instead, as our simulated appliance does not support such feature. 

Note that if the appliance's power can be turned on or off, or can be set to start running or pause, remember to set these parameters.

If you have tried multiple times and realise the target variable values cannot be achieved exactly, you can just let go and return "end" as an action, to save inference cost.

You need to generate a Python response containing two variables:

1. variable_reason (string) – Explains your reasoning, including:
    What has been completed.
    What still needs to be done.
    Why you are choosing a specific action.
2. variable_response_string (string) – Contains either:
    A "run_action" function call for the next step.
    The string "end" if no further actions are needed.
    
Example Scenario:
Suppose you need to set the juicer's power level to "3" by turning the power dial clockwise from "OFF" → "1" → "2" → "3".

Your first response should be:

variable_reason = "Current power value is OFF. I will turn the dial clockwise 3 times to set the value to 3. Then all parameters are set."
variable_response_string = "run_action('turn_dial_clockwise', execution_times=3)"

Guidelines:

Choose only one action per response (e.g., turn a dial, press a button).
Ensure clarity in variable_reason so the reasoning is easy to understand.
Keep variable_response_string directly executable, as it will be evaluated using eval().
Your response should always be in Python without any additional text outside the code block.

